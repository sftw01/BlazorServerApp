@using BlazorServerApp.Services;

@inject NavigationManager NavigationManager;
@inject IMemberService memberService;   

@if (showBox)
{
    <div class="modal-backdrop show"></div>
    <div class="modal fade show" style="display:block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" @onclick="() => OnChoiceChange(false)" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    @* <EditForm Model="@member" OnValidSubmit="SaveMember"> *@
                    <EditForm Model="@_tempMember">
                        @*in this case adding object will be executed only when form is valid*@
                        <DataAnnotationsValidator> </DataAnnotationsValidator>

                        <ValidationMessage For="@(() => _tempMember.MemberName)"></ValidationMessage>
                        <InputText class="form-control" placeholder="Name" @bind-Value="@_tempMember.MemberName"></InputText><br />

                        <ValidationMessage For="@(() => _tempMember.Email)"></ValidationMessage>
                        <InputText class="form-control" placeholder="Email" @bind-Value="@_tempMember.Email"></InputText><br />

                        <InputNumber class="form-control" placeholder="Age" @bind-Value="@_tempMember.Age"></InputNumber><br />
                        <InputDate class="form-control" placeholder="Joining date" @bind-Value="_tempMember.JoiningDate"></InputDate><br />

                        @* <button class="btn btn-primary" type="submit">Save Member</button> *@

                    </EditForm>


                </div>
                <div class="modal-footer">
                    @* <button type="button" @onclick="() => OnChoiceChange(false)" class="btn btn-secondary" data-bs-dissmiss="modal">Close</button> *@

                    <button @onclick="ResetForm" class="btn btn-outline-warning">Clear</button>
                    <button @onclick="() => OnChoiceChange(false)" class="btn btn-outline-secondary">Abort</button> 
                    <button @onclick="() => OnChoiceChange(true)" class="btn btn-success">Confirm</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    //get members details from db
    private List<Member> memberList;

    [Parameter]
    public Member member {get ; set;}
    //public Member _member = new Member();


    [Parameter]
    public EventCallback<bool> UserChoice { get; set; }


    [Parameter]
    public string Title { get; set; } = "Edytuj element";

    private MemberViewModel _tempMember = new MemberViewModel();
    public bool showBox { get; set; }

    public void Show()
    {
        showBox = true;
        StateHasChanged();
    }

    protected async Task OnChoiceChange(bool value)
    {
        if(value)
        {
            member.Email = _tempMember.Email;
            member.MemberName = _tempMember.MemberName;
            member.Age = _tempMember.Age;
        }
        showBox = false;
        await UserChoice.InvokeAsync(value);
    }

    protected override void OnInitialized()
    {
        _tempMember.MemberName = member.MemberName;
        _tempMember.Email = member.Email;
        _tempMember.Age = member.Age;   

        base.OnInitialized();
    }

    private void ResetForm()
    {
        _tempMember.MemberName = member.MemberName;
        _tempMember.Email = member.Email;
        _tempMember.Age = member.Age;
    }
}